name: Tests, Formatting and Deployment

on:
  push:
    branches:
      - '**'

jobs:
  setup-environment:
    runs-on: ubuntu-latest
    outputs:
      gradle-path: ${{ steps.gradle.path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Make gradlew executable
        run: chmod +x gradlew


  run-backend-tests:
    runs-on: ubuntu-latest
    needs: setup-environment
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      GOOGLE_SHEETS_SERVICE_ACCOUNT_KEY_FILE: ${{ runner.temp }}/google_api_key.json
      DB_URL: jdbc:postgresql://localhost:5432/dachshund
      DB_DRIVER: org.postgresql.Driver
      DB_LOGIN: postgres
      DB_PASSWORD: postgres

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Load Config Files from Secrets
        run: echo '${{ secrets.GOOGLE_API_KEY }}' > ${{ env.GOOGLE_SHEETS_SERVICE_ACCOUNT_KEY_FILE }}

      - name: Run Backend Tests
        run: ./gradlew test -PexcludeTests="**/DatabaseStartupTest*"

      - name: Store Reports
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: |
            **/build/reports/
            **/build/test-results/


  check-formatting:
    runs-on: ubuntu-latest
    needs: setup-environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Static Analysis
        run: ./gradlew spotlessCheck


  check-static-analyzer:
    runs-on: ubuntu-latest
    needs: setup-environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Static Analysis
        run: |
          ./gradlew detektMain
          ./gradlew detektTest


  build-and-push:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [ run-backend-tests, check-formatting, check-static-analyzer ]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ github.sha }}
  

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Transfer Compose File
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PROD_SSH_HOST }}
          username: ${{ secrets.PROD_SSH_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          source: "compose.yaml"
          target: "/root/edu-platform"

      - name: Deploy to Production Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_SSH_HOST }}
          username: ${{ secrets.PROD_SSH_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            cd /root/edu-platform
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            docker pull ghcr.io/${{ github.repository }}:${{ github.sha }}
            docker compose up -d --force-recreate backend
            docker image prune -af
