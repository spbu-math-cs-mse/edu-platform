name: Tests, Formatting and Deployment

on:
  push:
    branches:
      - '**'

jobs:
  setup-environment:
    runs-on: ubuntu-latest
    outputs:
      gradle-path: ${{ steps.gradle.path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Make gradlew executable
        run: chmod +x gradlew


  run-backend-tests:
    runs-on: ubuntu-latest
    needs: setup-environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Load Config Files from Secrets
        env:
          CONFIG_FILE: ${{ secrets.CONFIG_FILE }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        run: |
          echo $CONFIG_FILE > common-lib/src/main/resources/config.json
          echo $GOOGLE_API_KEY > common-lib/src/main/resources/google_api_key.json

      - name: Run Backend Tests
        run: ./gradlew test -PexcludeTests="**/DatabaseStartupTest*"

      - name: Store Reports
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: |
            **/build/reports/
            **/build/test-results/


  check-formatting:
    runs-on: ubuntu-latest
    needs: setup-environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Static Analysis
        run: ./gradlew spotlessCheck


  check-static-analyzer:
    runs-on: ubuntu-latest
    needs: setup-environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Static Analysis
        run: |
          ./gradlew detektMain
          ./gradlew detektTest

  deploy-prod:
    if: github.ref == 'refs/heads/deployment'
    runs-on: ubuntu-latest
    needs: [run-backend-tests, check-formatting, check-static-analyzer]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ github.sha }}

      - name: Deploy to Production Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_SSH_HOST }}
          username: ${{ secrets.PROD_SSH_USERNAME }}
          key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
          script: |
            cd /root/edu-platform
            docker compose pull backend
            docker compose up -d --force-recreate backend
            docker image prune -af