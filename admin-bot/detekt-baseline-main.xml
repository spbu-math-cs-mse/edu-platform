<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>CyclomaticComplexMethod:CreateAssignmentState.kt$private suspend fun BehaviourContext.queryProblemsDescriptions( state: CreateAssignmentState ): List&lt;ProblemDescription&gt;?</ID>
    <ID>ForbiddenComment:EditDescriptionState.kt$// state.course.name = answer TODO: implement this feature</ID>
    <ID>FunctionOnlyReturningConstant:Dialogues.kt$Dialogues$fun askAssignmentDescription(): String</ID>
    <ID>FunctionOnlyReturningConstant:Dialogues.kt$Dialogues$fun askCourse(): String</ID>
    <ID>FunctionOnlyReturningConstant:Dialogues.kt$Dialogues$fun assignmentDescriptionIsNotText(): String</ID>
    <ID>FunctionOnlyReturningConstant:Dialogues.kt$Dialogues$fun assignmentWasCreatedSuccessfully(): String</ID>
    <ID>FunctionOnlyReturningConstant:Dialogues.kt$Dialogues$fun devAskForId(): String</ID>
    <ID>FunctionOnlyReturningConstant:Dialogues.kt$Dialogues$fun devIdNotFound(): String</ID>
    <ID>FunctionOnlyReturningConstant:Dialogues.kt$Dialogues$fun incorrectProblemDescriptionEmpty(): String</ID>
    <ID>FunctionOnlyReturningConstant:Dialogues.kt$Dialogues$fun menu(): String</ID>
    <ID>FunctionOnlyReturningConstant:Dialogues.kt$Dialogues$fun noCoursesWasFound(): String</ID>
    <ID>FunctionOnlyReturningConstant:Dialogues.kt$Dialogues$fun noCoursesWasFoundForCreationOfAssignment(): String</ID>
    <ID>FunctionOnlyReturningConstant:Dialogues.kt$Dialogues$fun noIdInInput(): String</ID>
    <ID>FunctionOnlyReturningConstant:Dialogues.kt$Dialogues$fun problemsDescriptionsAreNotTexts(): String</ID>
    <ID>InjectDispatcher:AdminRun.kt$IO</ID>
    <ID>LongMethod:AddScheduledMessageState.kt$private fun keyboardWithDates(): InlineKeyboardMarkup</ID>
    <ID>LongMethod:CreateAssignmentState.kt$private suspend fun BehaviourContext.queryProblemsDescriptions( state: CreateAssignmentState ): List&lt;ProblemDescription&gt;?</ID>
    <ID>LongMethod:Main.kt$suspend fun main(vararg args: String)</ID>
    <ID>LongParameterList:AdminCore.kt$AdminCore$( private val scheduledMessagesDistributor: ScheduledMessagesDistributor, private val coursesDistributor: CoursesDistributor, private val studentStorage: StudentStorage, private val teacherStorage: TeacherStorage, private val assignmentStorage: AssignmentStorage, private val problemStorage: ProblemStorage, private val solutionDistributor: SolutionDistributor, )</ID>
    <ID>LoopWithTooManyJumpStatements:AddStudentState.kt$while</ID>
    <ID>LoopWithTooManyJumpStatements:AddTeacherState.kt$while</ID>
    <ID>LoopWithTooManyJumpStatements:CreateAssignmentState.kt$while</ID>
    <ID>LoopWithTooManyJumpStatements:RemoveStudentState.kt$while</ID>
    <ID>LoopWithTooManyJumpStatements:RemoveTeacherState.kt$while</ID>
    <ID>MagicNumber:AddScheduledMessageState.kt$3</ID>
    <ID>MagicNumber:AddScheduledMessageState.kt$4</ID>
    <ID>MagicNumber:AddScheduledMessageState.kt$5</ID>
    <ID>MagicNumber:AddScheduledMessageState.kt$6</ID>
    <ID>MagicNumber:CreateAssignmentState.kt$3</ID>
    <ID>MagicNumber:DateTime.kt$3</ID>
    <ID>MagicNumber:DateTime.kt$4</ID>
    <ID>MagicNumber:DateTime.kt$5</ID>
    <ID>MagicNumber:DateTime.kt$6</ID>
    <ID>MaxLineLength:AddStudentState.kt$"Введите ID учеников (через запятую), которых хотите добавить на курс ${state.courseName}, или отправьте /stop, чтобы отменить операцию."</ID>
    <ID>MaxLineLength:AddTeacherState.kt$+"Введите ID преподавателей (через запятую), которых хотите добавить на курс ${state.courseName}, или отправьте /stop, чтобы отменить операцию."</ID>
    <ID>MaxLineLength:Dialogues.kt$Dialogues$"Некорректный формат ввода (обнаружена строчка ($problemDescription) с более, чем 3-мя аргументами). Попробуйте ещё раз!"</ID>
    <ID>MaxLineLength:RemoveStudentState.kt$+"Введите ID учеников (через запятую), которых хотите убрать с курса ${state.courseName}, или отправьте /stop, чтобы отменить операцию."</ID>
    <ID>MaxLineLength:RemoveTeacherState.kt$+"Введите ID преподавателей (через запятую), которых хотите убрать с курса ${state.courseName}, или отправьте /stop, чтобы отменить операцию."</ID>
    <ID>MayBeConst:Keyboards.kt$Keyboards$val addScheduledMessage = "add scheduled message"</ID>
    <ID>MayBeConst:Keyboards.kt$Keyboards$val addStudent = "add a student"</ID>
    <ID>MayBeConst:Keyboards.kt$Keyboards$val addTeacher = "add a teacher"</ID>
    <ID>MayBeConst:Keyboards.kt$Keyboards$val courseId = "courseId"</ID>
    <ID>MayBeConst:Keyboards.kt$Keyboards$val courseInfo = "course info"</ID>
    <ID>MayBeConst:Keyboards.kt$Keyboards$val createAssignment = "create assignment"</ID>
    <ID>MayBeConst:Keyboards.kt$Keyboards$val createCourse = "create course"</ID>
    <ID>MayBeConst:Keyboards.kt$Keyboards$val editDescription = "edit description"</ID>
    <ID>MayBeConst:Keyboards.kt$Keyboards$val getProblems = "get problems"</ID>
    <ID>MayBeConst:Keyboards.kt$Keyboards$val getTeachers = "get teachers"</ID>
    <ID>MayBeConst:Keyboards.kt$Keyboards$val removeStudent = "remove a student"</ID>
    <ID>MayBeConst:Keyboards.kt$Keyboards$val removeTeacher = "remove a teacher"</ID>
    <ID>MayBeConst:Keyboards.kt$Keyboards$val returnBack = "Назад"</ID>
    <ID>NestedBlockDepth:CreateAssignmentState.kt$@OptIn(ExperimentalCoroutinesApi::class) private suspend fun BehaviourContext.queryAssignmentDescription( state: CreateAssignmentState ): String?</ID>
    <ID>NestedBlockDepth:CreateAssignmentState.kt$private suspend fun BehaviourContext.queryProblemsDescriptions( state: CreateAssignmentState ): List&lt;ProblemDescription&gt;?</ID>
    <ID>ReturnCount:AddScheduledMessageState.kt$private suspend fun BehaviourContext.queryDateFromUser( state: AddScheduledMessageState ): LocalDate?</ID>
    <ID>ReturnCount:CreateAssignmentState.kt$internal fun parseProblemsDescriptions( problemsDescriptionsFromText: String ): Result&lt;List&lt;ProblemDescription&gt;, String&gt;</ID>
    <ID>TooManyFunctions:AdminCore.kt$AdminCore</ID>
    <ID>TooManyFunctions:Dialogues.kt$Dialogues</ID>
    <ID>UnsafeCallOnNullableType:AdminRun.kt$it.from!!</ID>
    <ID>UnsafeCallOnNullableType:EditCourseState.kt$core.getCourse(answer)!!</ID>
    <ID>UseAnyOrNoneInsteadOfFind:AdminCore.kt$AdminCore$find { it.id == course.id }</ID>
  </CurrentIssues>
</SmellBaseline>
