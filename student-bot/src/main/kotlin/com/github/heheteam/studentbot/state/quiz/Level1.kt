package com.github.heheteam.studentbot.state.quiz

import com.github.heheteam.commonlib.api.CommonUserApi
import com.github.heheteam.commonlib.api.ParentApi
import com.github.heheteam.commonlib.api.StudentApi
import com.github.heheteam.commonlib.interfaces.CommonUserId
import com.github.heheteam.commonlib.interfaces.ParentId
import com.github.heheteam.commonlib.interfaces.StudentId
import com.github.heheteam.commonlib.util.NewState
import com.github.heheteam.commonlib.util.Unhandled
import dev.inmo.tgbotapi.types.chat.User

open class L1S0<ApiService : CommonUserApi<UserId>, UserId : CommonUserId>(
  override val context: User,
  override val userId: UserId,
) : QuestState<ApiService, UserId>() {
  override suspend fun BotContext.run(service: ApiService) {
    saveState(service)
    send(
      "\uD83C\uDF32 –¢—ã –≤—Ö–æ–¥–∏—à—å –≤ –ß–∏—Å–ª–æ–≤–æ–π –õ–µ—Å. " +
        "–í—Å—ë –∑–¥–µ—Å—å –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ –∏–∑ —á–∏—Å–µ–ª: –¥–µ—Ä–µ–≤—å—è —Å—á–∏—Ç–∞—é—Ç –ª–∏—Å—Ç—å—è, –∫—É—Å—Ç—ã —à–µ–ø—á—É—Ç –ø—Ä–∏–º–µ—Ä—ã."
    )

    val buttons = listOf("\uD83D\uDE80 –î–∞, –æ—Ç–∫—Ä–æ–µ–º –≤–æ—Ä–æ—Ç–∞!", "\uD83D\uDD19 –ù–∞–∑–∞–¥")
    send(
        "$DOG_EMOJI –î—É—Å—è: \"–í–º–µ—Å—Ç–µ –º—ã –ø—Ä–æ–π–¥—ë–º —Å–∫–≤–æ–∑—å —á–∞—â—É –∏ –Ω–∞–π–¥—ë–º —Ç–∞–π–Ω—ã–π –≤—ã—Ö–æ–¥! " +
          "–ù–æ —Å–Ω–∞—á–∞–ª–∞ ‚Äî –æ—Ç–∫—Ä–æ–µ–º –≤–æ—Ä–æ—Ç–∞. –¢–æ–ª—å–∫–æ —Ç–æ—Ç, –∫—Ç–æ —Ä–µ—à–∏—Ç –∑–∞–¥–∞—á—É, –º–æ–∂–µ—Ç –ø—Ä–æ–π—Ç–∏ –¥–∞–ª—å—à–µ.\"\n",
        replyMarkup = verticalKeyboard(buttons),
      )
      .also { messagesWithKeyboard.add(it) }

    addDataCallbackHandler { callbackQuery ->
      when (callbackQuery.data) {
        buttons[0] -> {
          val userId = userId
          NewState(
            when (userId) {
              is StudentId -> L1S1Student(context, userId)
              is ParentId -> L1S1Parent(context, userId)
              else -> error("unreachable")
            }
          )
        }
        buttons[1] -> {
          saveState(service)
          NewState(menuState())
        }
        else -> Unhandled
      }
    }
  }
}

open class L1S1<ApiService : CommonUserApi<UserId>, UserId : CommonUserId>(
  override val context: User,
  override val userId: UserId,
) : QuestState<ApiService, UserId>() {
  override suspend fun BotContext.run(service: ApiService) {
    saveState(service)
    send("$DOG_EMOJI –î—É—Å—è: \"–û—Å—Ç–æ—Ä–æ–∂–Ω–æ! –¢–æ–ª—å–∫–æ —Ç–æ—Ç, –∫—Ç–æ —Ä–µ—à–∏—Ç –∑–∞–¥–∞—á—É, –º–æ–∂–µ—Ç –ø—Ä–æ–π—Ç–∏ –¥–∞–ª—å—à–µ.\"")
    send(
      "–ù–∞ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã—Ö –≤–æ—Ä–æ—Ç–∞—Ö –∫—Ç–æ-—Ç–æ –≤—ã–ø–∏—Å–∞–ª –≤—Å–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 25 –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, " +
        "—Ç–∞–∫ —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ: 252423222120...54321. " +
        "–ö–∞–∫–∞—è —Ü–∏—Ñ—Ä–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –Ω–∞ 24 –º–µ—Å—Ç–µ, —Å—á–∏—Ç–∞—è —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ?"
    )

    addIntegerReadHandler(
      4,
      this@L1S1,
      {
        send(
          "‚úÖ –©—ë–ª–∫! ‚Äî –≤–æ—Ä–æ—Ç–∞ —Ä–∞—Å–ø–∞—Ö–Ω—É–ª–∏—Å—å, –∏ —Ç—ã –≤—Ö–æ–¥–∏—à—å –≤ —á–∞—â—É. " +
            "–¢—Ä–æ–ø–∏–Ω–∫–∞ —É—Ö–æ–¥–∏—Ç –≤–ø–µ—Ä—ë–¥, –Ω–æ –≤–¥—Ä—É–≥ —Ç—ã —Å–ª—ã—à–∏—à—å –ø–ª–µ—Å–∫ –≤–æ–¥—ã..."
        )
        val userId = userId
        when (userId) {
          is StudentId -> L1S2Student(context, userId)
          is ParentId -> L1S2Parent(context, userId)
          else -> error("unreachable")
        }
      },
      {
        send(
          "\uD83D\uDD12 –í–æ—Ä–æ—Ç–∞ –∑–∞–¥—Ä–æ–∂–∞–ª–∏‚Ä¶ –Ω–æ –æ—Å—Ç–∞–ª–∏—Å—å –∑–∞–∫—Ä—ã—Ç—ã. " +
            "–ù–∞–≤–µ—Ä–Ω–æ–µ, –æ—Ç–≤–µ—Ç –±—ã–ª –Ω–µ–≤–µ—Ä–Ω—ã–π. –î–µ—Ä–µ–≤—å—è –Ω–µ–¥–æ–≤–æ–ª—å–Ω–æ –∑–∞—à—É–º–µ–ª–∏."
        )
        val userId = userId
        when (userId) {
          is StudentId -> DefaultErrorStateStudent(context, userId, L1S1Student(context, userId))
          is ParentId -> DefaultErrorStateParent(context, userId, L1S1Parent(context, userId))
          else -> error("unreachable")
        }
      },
    )
  }
}

open class L1S2<ApiService : CommonUserApi<UserId>, UserId : CommonUserId>(
  override val context: User,
  override val userId: UserId,
) : QuestState<ApiService, UserId>() {
  override suspend fun BotContext.run(service: ApiService) {
    saveState(service)
    send(
      "\uD83C\uDF0A –ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π ‚Äî —Ä–µ—á–∫–∞. " +
        "–ß–µ—Ä–µ–∑ –Ω–µ—ë –º–æ–∂–Ω–æ –ø–µ—Ä–µ–±—Ä–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –∫–∞–º–Ω—è–º, –µ—Å–ª–∏ –ø—Ä—ã–≥–∞—Ç—å –ø–æ –Ω–∏–º –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ."
    )
    val buttons =
      listOf(
        "\uD83C\uDFDE –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ—á–∫–µ",
        "\uD83E\uDD17 –ü–æ—á–µ—Å–∞—Ç—å –ø—É–∑–æ –î—É—Å–µ",
        "\uD83D\uDD19  –ù–∞–∑–∞–¥",
      )
    send(
        "$DOG_EMOJI –î—É—Å—è: \"–ö—Å—Ç–∞—Ç–∏... —Ö–æ—á–µ—à—å –ø–æ—á–µ—Å–∞—Ç—å –º–Ω–µ –ø—É–∑–æ? –Ø —ç—Ç–æ –æ—á–µ–Ω—å –ª—é–±–ª—é!\"\n",
        replyMarkup = verticalKeyboard(buttons),
      )
      .also { messagesWithKeyboard.add(it) }
    addDataCallbackHandler { callbackQuery ->
      when (callbackQuery.data) {
        buttons[0] -> {
          val userId = userId
          NewState(
            when (userId) {
              is StudentId -> L1S3Student(context, userId)
              is ParentId -> L1S3Parent(context, userId)
              else -> error("unreachable")
            }
          )
        }
        buttons[1] -> {
          val userId = userId
          NewState(
            when (userId) {
              is StudentId -> L1S3BellyrubStudent(context, userId)
              is ParentId -> L1S3BellyrubParent(context, userId)
              else -> error("unreachable")
            }
          )
        }
        buttons[2] -> {
          NewState(menuState())
        }
        else -> Unhandled
      }
    }
  }
}

open class L1S3Bellyrub<ApiService : CommonUserApi<UserId>, UserId : CommonUserId>(
  override val context: User,
  override val userId: UserId,
) : QuestState<ApiService, UserId>() {
  override suspend fun BotContext.run(service: ApiService) {
    saveState(service)
    sendImage("/bellyrub_1.png")
    val buttons = listOf("\uD83C\uDFDE –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ—á–∫–µ")
    send(
        "–ú—Ä—Ä—Ä... \uD83D\uDE0C –°–ø–∞—Å–∏–±–æ! –≠—Ç–æ –±—ã–ª–æ —á—É–¥–µ—Å–Ω–æ. " +
          "–¢–µ–ø–µ—Ä—å —É –º–µ–Ω—è –µ—â—ë –±–æ–ª—å—à–µ —Å–∏–ª –ø—Ä–æ–π—Ç–∏ —Ä–µ—á–∫—É –≤–º–µ—Å—Ç–µ —Å —Ç–æ–±–æ–π!",
        replyMarkup = verticalKeyboard(buttons),
      )
      .also { messagesWithKeyboard.add(it) }
    addDataCallbackHandler { callbackQuery ->
      when (callbackQuery.data) {
        buttons[0] -> {
          val userId = userId
          NewState(
            when (userId) {
              is StudentId -> L1S3Student(context, userId)
              is ParentId -> L1S3Parent(context, userId)
              else -> error("unreachable")
            }
          )
        }
        else -> Unhandled
      }
    }
  }
}

open class L1S3<ApiService : CommonUserApi<UserId>, UserId : CommonUserId>(
  override val context: User,
  override val userId: UserId,
) : QuestState<ApiService, UserId>() {
  override suspend fun BotContext.run(service: ApiService) {
    saveState(service)
    send(
      "\uD83E\uDEA8 –¢—ã —Å—Ç–æ–∏—à—å –Ω–∞ –±–µ—Ä–µ–≥—É –∏ –≤–∏–¥–∏—à—å –ø–µ—Ä–µ–¥ —Å–æ–±–æ–π 101 –∫–∞–º–µ—à–µ–∫ –≤—ã–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤ —Ä—è–¥. " +
        "–ú–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å –ª–∏–±–æ –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä—ã–∂–∫–∏ —á–µ—Ä–µ–∑ 4 –∫–∞–º–µ—à–∫–∞, –ª–∏–±–æ –¥–ª–∏–Ω–Ω—ã–µ ‚Äì —á–µ—Ä–µ–∑ 12 " +
        "(—Ç–æ –µ—Å—Ç—å –µ—Å–ª–∏ —Ç—ã —Å—Ç–æ—è–ª –Ω–∞ –ø–µ—Ä–≤–æ–º –∫–∞–º–µ—à–∫–µ, —Ç–æ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä—ã–≥–Ω—É—Ç—å –Ω–∞ —à–µ—Å—Ç–æ–π –∏–ª–∏ —á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—ã–π –∫–∞–º–µ—à–µ–∫). " +
        "–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Ç—ã —Å—Ç–æ–∏—à—å –Ω–∞ –ø–µ—Ä–≤–æ–º –∫–∞–º–µ—à–∫–µ, –∞ –ø–æ—Å–ª–µ–¥–Ω–∏–º –ø—Ä—ã–∂–∫–æ–º –Ω—É–∂–Ω–æ –æ–∫–∞–∑–∞—Ç—å—Å—è –Ω–∞ 101 –∫–∞–º–µ—à–∫–µ. " +
        "–ö–∞–∫–æ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—Ä—ã–∂–∫–æ–≤ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å? "
    )
    send("$DOG_EMOJI –î—É—Å—è: \"–¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è! –ì–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–µ –æ—Å—Ç—É–ø–∏—Ç—å—Å—è!\"")
    addIntegerReadHandler(
      7,
      this@L1S3,
      {
        send("–¢—ã –ø–µ—Ä–µ–ø—Ä—ã–≥–Ω—É–ª —Ä–µ—á–∫—É! \uD83C\uDF89 –í–∞—Å –≤—Å—Ç—Ä–µ—á–∞–µ—Ç –¥—Ä–µ–≤–Ω–∏–π –≥–æ–≤–æ—Ä—è—â–∏–π –¥—É–±.\n")
        val userId = userId
        when (userId) {
          is StudentId -> L1S4Student(context, userId)
          is ParentId -> L1S4Parent(context, userId)
          else -> error("unreachable")
        }
      },
      {
        sendMarkdown("*–ë—É–ª—å–∫!* ‚Äî —á—É—Ç—å –Ω–µ –æ—Å—Ç—É–ø–∏–ª—Å—è!")
        val userId = userId
        when (userId) {
          is StudentId -> DefaultErrorStateStudent(context, userId, L1S3Student(context, userId))
          is ParentId -> DefaultErrorStateParent(context, userId, L1S3Parent(context, userId))
          else -> error("unreachable")
        }
      },
    )
  }
}

const val TREE_EMOJI = "üå≥"

open class L1S4<ApiService : CommonUserApi<UserId>, UserId : CommonUserId>(
  override val context: User,
  override val userId: UserId,
) : QuestState<ApiService, UserId>() {
  override suspend fun BotContext.run(service: ApiService) {
    saveState(service)
    sendImage("/ent.png")
    send(
      "$TREE_EMOJI –≠–Ω—Ç: \"–Ø –Ω–µ –¥–µ—Ä–µ–≤–æ. –Ø –≠–ù–¢! –ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ–π–¥–µ—Ç –¥–∞–ª—å—à–µ. –≠—Ç–æ –º–æ—è –¥–æ—Ä–æ–≥–∞, –∏ –æ–Ω–∞ –ø–ª–∞—Ç–Ω–∞—è\""
    )
    send(
      "$DOG_EMOJI –î—É—Å—è (—à—ë–ø–æ—Ç–æ–º): \"(–ü–æ—Å–∫—É–ª–∏–≤–∞–µ—Ç) –ù–æ —É –Ω–∞—Å –Ω–µ—Ç –¥–µ–Ω–µ–≥ ‚Äî —è —Å–æ–±–∞–∫–∞, –∞ —ç—Ç–æ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —â–µ–Ω–æ–∫‚Ä¶\""
    )
    send(
      "$TREE_EMOJI –ß—Ç–æ–∂. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–æ—á—å –º–Ω–µ –∏ –∏–Ω–∞—á–µ ‚Äî —É –º–µ–Ω—è –æ—á–µ–Ω—å —Å–∏–ª—å–Ω–æ —á–µ—à–µ—Ç—Å—è –≥–æ–ª–æ–≤–∞: " +
        "–≤ –ª–∏—Å—Ç—å—è—Ö —è —Å–≤–æ–∏—Ö –∑–∞–ø—É—Ç–∞–ª—Å—è, –∫–æ—Ç–æ—Ä—ã—Ö –∞–∂ 500. " +
        "–ß–∞—Å—Ç—å –ª–∏—Å—Ç—å–µ–≤ —É –º–µ–Ω—è –∂–∞–¥–Ω—ã–µ: –æ–Ω–∏ –ª—é–±—è—Ç –æ—Ç–Ω–∏–º–∞—Ç—å ‚Äî –∏—Ö —É –º–µ–Ω—è 300. " +
        "–ß–∞—Å—Ç—å –ª–∏—Å—Ç—å–µ–≤ —É –º–µ–Ω—è –ø—Ä–µ–¥–ø—Ä–∏–∏–º—á–∏–≤—ã–µ: –æ–Ω–∏ –ª—é–±—è—Ç –¥–µ–ª–∏—Ç—å, —Ç–∞–∫–∏—Ö —É –º–µ–Ω—è 400. " +
        "–í—Å—è–∫–∏–π –ª–∏—Å—Ç –ª–∏–±–æ –∂–∞–¥–Ω—ã–π –ª–∏–±–æ –ø—Ä–µ–¥–ø—Ä–∏–∏–º—á–∏–≤—ã–π. " +
        "–ü–æ–Ω—è—Ç—å –º–Ω–µ –Ω–∞–¥–æ –±—ã, —Å–∫–æ–ª—å–∫–æ –ª–∏—Å—Ç—å–µ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –ª—é–±—è—Ç –∏ –æ—Ç–Ω–∏–º–∞—Ç—å, –∏ –¥–µ–ª–∏—Ç—å ‚Äî " +
        "–æ–Ω–∏ –∫—Ä–∞—Å–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ —É–∂–µ, –Ω–∞–¥–æ –∏—Ö —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å. "
    )
    addIntegerReadHandler(
      200,
      this@L1S4,
      {
        sendImage("/leaving_forest.png")
        send(
          "$TREE_EMOJI: \"–õ–∏—Å—Ç—å—è –º–æ–ª–≤—è—Ç, —á—Ç–æ —Ç—ã –Ω–µ –æ—à–∏–±—Å—è. " +
            "–°–ø–∞—Å–∏–±–æ —Ç–µ–±–µ –∑–∞ –ø–æ–º–æ—â—å, —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –¥–∏—Ç—è! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∏–¥—Ç–∏ –¥–∞–ª—å—à–µ‚Ä¶\""
        )
        val userId = userId
        when (userId) {
          is StudentId -> L2S0Student(context, userId)
          is ParentId -> L2S0Parent(context, userId)
          else -> error("unreachable")
        }
      },
      {
        val userId = userId
        when (userId) {
          is StudentId -> L1S4WrongStudent(context, userId)
          is ParentId -> L1S4WrongParent(context, userId)
          else -> error("unreachable")
        }
      },
    )
  }
}

open class L1S4Wrong<ApiService : CommonUserApi<UserId>, UserId : CommonUserId>(
  override val context: User,
  override val userId: UserId,
) : QuestState<ApiService, UserId>() {
  override suspend fun BotContext.run(service: ApiService) {
    saveState(service)
    val buttons =
      listOf("$TREE_EMOJI –ü–æ–¥–æ–π—Ç–∏ –∫ –¥—É–±—É", "\uD83E\uDD17 –ü–æ—á–µ—Å–∞—Ç—å –µ—â—ë —Ä–∞–∑", "\uD83D\uDD19  –ù–∞–∑–∞–¥")
    send(
        "$DOG_EMOJI –î—É—Å—è: \"–ê –ø–æ–∫–∞ —Ç—ã –æ—Ç–¥—ã—Ö–∞–µ—à—å, –º–æ–∂–µ—Ç, –ø–æ—á–µ—à–µ—à—å –º–Ω–µ –ø—É–∑–æ? –ù—É –ø–æ–∂–∞–∞–∞–ª—É–π—Å—Ç–∞! \uD83E\uDD7A\"\n",
        replyMarkup = verticalKeyboard(buttons),
      )
      .also { messagesWithKeyboard.add(it) }
    addDataCallbackHandler { callbackQuery ->
      when (callbackQuery.data) {
        buttons[0] -> {
          val userId = userId
          NewState(
            when (userId) {
              is StudentId -> L1S4Student(context, userId)
              is ParentId -> L1S4Parent(context, userId)
              else -> error("unreachable")
            }
          )
        }
        buttons[1] -> {
          val userId = userId
          NewState(
            when (userId) {
              is StudentId -> L1S4BellyrubStudent(context, userId)
              is ParentId -> L1S4BellyrubParent(context, userId)
              else -> error("unreachable")
            }
          )
        }
        buttons[2] -> {
          saveState(service)
          NewState(menuState())
        }
        else -> Unhandled
      }
    }
  }
}

open class L1S4Bellyrub<ApiService : CommonUserApi<UserId>, UserId : CommonUserId>(
  override val context: User,
  override val userId: UserId,
) : QuestState<ApiService, UserId>() {
  override suspend fun BotContext.run(service: ApiService) {
    saveState(service)
    sendImage("/bellyrub_2.png")
    val buttons = listOf("\uD83C\uDFDE –ü–æ–¥–æ–π—Ç–∏ –∫ –¥—É–±—É")
    send(
        "–ê—Ö, –¥–∞! –¢—ã ‚Äî —Å–∞–º—ã–π –ª—É—á—à–∏–π –ø—É–∑–æ—á–µ—Å–∞—Ç–µ–ª—å –Ω–∞ —Å–≤–µ—Ç–µ! \uD83D\uDC3E",
        replyMarkup = verticalKeyboard(buttons),
      )
      .also { messagesWithKeyboard.add(it) }
    addDataCallbackHandler { callbackQuery ->
      when (callbackQuery.data) {
        buttons[0] -> {
          val userId = userId
          NewState(
            when (userId) {
              is StudentId -> L1S4Student(context, userId)
              is ParentId -> L1S4Parent(context, userId)
              else -> error("unreachable")
            }
          )
        }
        else -> Unhandled
      }
    }
  }
}

class L1S0Student(context: User, userId: StudentId) : L1S0<StudentApi, StudentId>(context, userId)

class L1S0Parent(context: User, userId: ParentId) : L1S0<ParentApi, ParentId>(context, userId)

class L1S1Student(context: User, userId: StudentId) : L1S1<StudentApi, StudentId>(context, userId)

class L1S1Parent(context: User, userId: ParentId) : L1S1<ParentApi, ParentId>(context, userId)

class L1S2Student(context: User, userId: StudentId) : L1S2<StudentApi, StudentId>(context, userId)

class L1S2Parent(context: User, userId: ParentId) : L1S2<ParentApi, ParentId>(context, userId)

class L1S3BellyrubStudent(context: User, userId: StudentId) :
  L1S3Bellyrub<StudentApi, StudentId>(context, userId)

class L1S3BellyrubParent(context: User, userId: ParentId) :
  L1S3Bellyrub<ParentApi, ParentId>(context, userId)

class L1S3Student(context: User, userId: StudentId) : L1S3<StudentApi, StudentId>(context, userId)

class L1S3Parent(context: User, userId: ParentId) : L1S3<ParentApi, ParentId>(context, userId)

class L1S4Student(context: User, userId: StudentId) : L1S4<StudentApi, StudentId>(context, userId)

class L1S4Parent(context: User, userId: ParentId) : L1S4<ParentApi, ParentId>(context, userId)

class L1S4WrongStudent(context: User, userId: StudentId) :
  L1S4Wrong<StudentApi, StudentId>(context, userId)

class L1S4WrongParent(context: User, userId: ParentId) :
  L1S4Wrong<ParentApi, ParentId>(context, userId)

class L1S4BellyrubStudent(context: User, userId: StudentId) :
  L1S4Bellyrub<StudentApi, StudentId>(context, userId)

class L1S4BellyrubParent(context: User, userId: ParentId) :
  L1S4Bellyrub<ParentApi, ParentId>(context, userId)
