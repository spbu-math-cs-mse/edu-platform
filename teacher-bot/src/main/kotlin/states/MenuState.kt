package com.github.heheteam.teacherbot.states

import com.github.heheteam.teacherbot.Dialogues
import com.github.heheteam.teacherbot.Keyboards
import com.github.heheteam.teacherbot.TeacherCore
import dev.inmo.tgbotapi.extensions.api.delete
import dev.inmo.tgbotapi.extensions.api.send.media.sendSticker
import dev.inmo.tgbotapi.extensions.api.send.send
import dev.inmo.tgbotapi.extensions.behaviour_builder.DefaultBehaviourContextWithFSM
import dev.inmo.tgbotapi.extensions.behaviour_builder.expectations.waitDataCallbackQuery
import kotlinx.coroutines.flow.first
import kotlin.time.DurationUnit

fun DefaultBehaviourContextWithFSM<BotState>.strictlyOnMenuState(core: TeacherCore) {
    strictlyOn<MenuState> { state ->
        if (state.context.username == null) {
            return@strictlyOn null
        }
        if (core.getUserId(state.context.id) == null) {
            return@strictlyOn StartState(state.context)
        }

        val stickerMessage =
            bot.sendSticker(
                state.context,
                Dialogues.typingSticker,
            )

        val menuMessage =
            bot.send(
                state.context,
                Dialogues.menu(),
                replyMarkup = Keyboards.menu(),
            )

        while (true) {
            val callbackData = waitDataCallbackQuery().first().data
            when (callbackData) {
                Keyboards.getSolution -> {
                    bot.delete(stickerMessage)
                    bot.delete(menuMessage)
                    return@strictlyOn GettingSolutionState(state.context)
                }
                Keyboards.viewStats -> {
                    val userId = core.getUserId(state.context.id)
                    if (userId != null) {
                        val stats = core.getTeacherStats(userId)
                        val globalStats = core.getGlobalStats()

                        bot.send(
                            state.context,
                            """
                        üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫:
                        
                        –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${stats.totalAssessments}
                        –°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ –¥–µ–Ω—å: %.2f
                        ${stats.lastAssessmentTime?.let { "–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: $it" } ?: "–ù–µ—Ç –ø—Ä–æ–≤–µ—Ä–æ–∫"}
                        –ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç: ${stats.uncheckedSolutions}
                        ${stats.averageCheckTimeHours?.let { "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É: %.1f —á–∞—Å–æ–≤".format(it) } ?: ""}
                        ${stats.averageResponseTime?.let { "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${it.toDouble(DurationUnit.HOURS)} —á–∞—Å–æ–≤" } ?: ""}
                        
                        üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
                        –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: %.1f —á–∞—Å–æ–≤
                        –í—Å–µ–≥–æ –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç: %d
                        –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: %.1f —á–∞—Å–æ–≤
                        """.trimIndent().format(
                            stats.averageAssessmentsPerDay,
                            globalStats.averageCheckTimeHours,
                            globalStats.totalUncheckedSolutions,
                            globalStats.averageResponseTimeHours
                        ),
                            replyMarkup = Keyboards.returnBack()
                        )
                    }
                    return@strictlyOn MenuState(state.context)
                    }
            }
        }
        return@strictlyOn GettingSolutionState(state.context)
    }
}
